# MIF 2.1
#
#
set pi [expr {4*atan(1.0)}]
set mu0 [expr {4*$pi*1e-7}]

RandomSeed 1

if 0 { 
#Saturated Magnetization proc. Designed for the calculation of Ms. 

}

 if 0 {
 
proc ms { Md d r } {
	set Ms_theoretical [expr { $Md* (($r-$dr)/r)^3 }]
	
	#puts " The maximum saturated magnetization of sphere's domain is $Ms\n." ;
	if 0 { 
	#Statement designed for debugging purposes only. 
	
	}
	return $Ms_theoretical	
    }

proc tau_measured {tau_a a r} {
	set k_Boltzmann 1.381e-23
	set T_body 310
	set tau0 10e-10
	set vm [expr {(4*pi/3)*($r)^3}]
	set thermal_energy [expr {($T_body* $k_Boltzmann)}]
	set tauN [expr{($tau0/2)*sqrt($pi*$thermal_energy/($a*($vm)))* exp( ($a*$vm)/($thermal_energy))}]
	return $tauN
    }
 
 #Variables that I think are needed to parse exp. conditions:
 #intended global variables: r_max, r_min particle types; 
 
 #Boundaries (Diameter Boundaries) of NP Core only:
 #2 major sizes within boundaries: d_total [10,130]e-10 m
 #bounds for d_core [10,130]e-10 m.
 #relevant constants/ expressions
 
 set k_Boltzmann 1.381e-23
 set T_body 310
 set vm [expr {(4*$pi/3)*($r)^3}]
 set thermal_energy [expr {($T_body* $k_Boltzmann)}]
 set Hk 3.7626e04 
 set Md 100
 set thickness 3.2e-09
 set Ms_max [expr { ms $Md $thickness 130e-10 }]
 set Ms_min [expr { ms $Md $thickness 10e-10 }]
 set a_max [expr{($mu0*$Ms_max*$Hk)/2}] 
 set a_min [expr{($mu0*$Ms_min*$Hk)/2}] 
 set W_heat_max [expr {(4*$Ms_max*$mu0*$Hk) }] 
 set W_heat_min [expr {(4*$Ms_min*$mu0*$Hk) }] 
 set nu  8.9e-4  
 set tauB [expr {(3*($nu)/$thermal_energy) }] 
 set tau_parallel [expr { 1/((1/$tauN)+ (1/$tauB)) }] 
 
 #Assuming that |Hk| = |Ha|, then all of these expressions are valid
 
 set dE_Min ($KU*$vm) - $Hk*$Ms_min*sin($phi) +/- $Hk*$Ms_min*cos($phi) 
 set dE_Max ($KU*$vm) - $Hk*$Ms_max*sin($phi) +/- $Hk*$Ms_min*cos($phi) 
 set chi0 [expr {($Md/ $Hk)}] 
 set fRes 3.0e5 
 set P_diamagneticOnly ($pi*$fRes)*$chi0* pow($Hk,2)*((2*$pi*$fRes*$tau_parallel)/ (1+ pow((2*$pi*$fRes),2))) 
 set P_saturationDiamagnetic_max ($pi*$fRes)*$chi0*($Hk* Ms_max)*((2*$pi*$fRes*$tau_parallel)/ (1+ pow((2*$pi*$fRes),2))) 
 set P_saturationDiamagnetic_min ($pi*$fRes)*$chi0*($Hk* Ms_min)*((2*$pi*$fRes*$tau_parallel)/ (1+ pow((2*$pi*$fRes),2)))


proc Octs { cellsize x y z xmin ymin zmin xmax ymax zmax } {
    set xindex [expr {int(floor(($x-$xmin)/$cellsize))}]
    set yindex [expr {int(floor(($y-$ymin)/$cellsize))}]
    set zindex [expr {int(floor(($z-$zmin)/$cellsize))}]
    set octant [expr {1+$xindex+2*$yindex+4*$zindex}]
    if {$octant<1 || $octant>8} {
       return 0
    }
    return $octant
}
Specify Oxs_ScriptAtlas:octants {
    xrange {-130e-10 130e-10}
    yrange {-130e-10 130e-10}
    zrange {-130e-10 130e-10}
    regions { VIII V VII VI IV I III II }
    script_args { rawpt minpt maxpt }
    script { Octs 130e-10 }
}
 
}

Specify Oxs_MultiAtlas:np {
   atlas {Oxs_EllipsoidAtlas:shellL {
	  xrange {10e-10 40e-10}
      yrange {10e-10 40e-10}
	  zrange {10e-10 40e-10}
   }} 
   atlas {Oxs_EllipsoidAtlas:core {
	  xrange {40e-10 100e-10}
      yrange {40e-10 100e-10}
	  zrange {40e-10 100e-10}   
   }}    
   atlas {Oxs_EllipsoidAtlas:shellR {
	  xrange {100e-10 130e-10}
      yrange {100e-10 130e-10}
	  zrange {100e-10 130e-10}
   }}    
} ;# spheres (core,shell) of maximum diameter 130 nm 

Specify Oxs_RectangularMesh:mesh [subst {
	cellsize {1e-10 1e-10 1e-10}
	atlas :np
}]

#Edit 03-01-20: Omitting Exchange6Ngbr, ScriptUZeeman, Demag and/ or UniaxialAnisotropy for further 
#analysis when completed with CoreOnly.   
if 0 {

Specify Oxs_Exchange6Ngbr:npExch {
 default_A 100
 atlas np
 A {
    shellL core 100
    core shellR 100  
	shellL shellR 0
   } }
#total time interval value

Specify Oxs_ScriptUZeeman {
   script_args total_time
   script SineField
}
#A sinusoidal diamagnetic field subject to the +x-axis, assuming |H| = Hk*(|n| = 1) -> |Ms| = (|Md|/|Hk|).
#Under those conditions, we can assume that we are observing maximum uniaxial anisotropy v. Ms 
#increasing/decreasing with time. 
  
proc SineField { total_time } {
    set pi [expr {4*atan(1.0)}]
    set amp 3.7626e04
    set Freq [expr {3.0e5 *(2*$pi)}]
    set Hx [expr {$amp*sin($Freq*$total_time)}]
    set dHx [expr {$amp*$Freq*cos($Freq*$total_time)}]
    return [list $Hx 0 0 $dHx 0 0]
}
#Assuming an Amplitude of Hk A/m of a time-dependent sinusoid function, 
#the frequency is 3.0e5 Hz, dependent function on total_time, and is otherwise 
#ready to go the distance.

}

Specify Oxs_UniaxialAnisotropy {
     Ha 3.7626e04 
	 axis {1 0 0}
}
#Assuming amp = |Ha| = |Hk| = 3.7626e04 and |Md| = 100 A/m, 

Specify Oxs_Demag  {}
Specify Oxs_RungeKuttaEvolve:evolve {}

if 0 { 
 #Assuming that we are allowing only 
 #a positive sphere for each NP 
 #(i.e. core NP sphere, shell sphere, etc.)
 #and that we are creating/ allowing 
 #all Cartesian coordinate axes such that m0 = 
 #[(+/-)x,(+/-)y,(+/-)z] unit vectors st np
}

if 0 {

proc ms { Md 100 d 32e-10 r } {
	set Ms_theoretical [expr { $Md*(($r- $d)/r)^3 }]
	
	#puts " The maximum saturated magnetization of sphere's domain is $Ms\n." ;
	#Statement designed for debugging purposes only.
	
	return $Ms_theoretical	
    }
proc populate {  
	set radiiList {}
    for {set i 10} {i < 131} {incr $i} { lappend radiiList expr[$i*1e-10] }
	set MsList {}
    foreach r $radiiList { lappend MsList [expr { ms 100 32e-10 r }] }
    return $MsList	   
	}
	
proc Vortex { xrel yrel zrel } {
	set xrad [expr {$xrel-0.5}]
	set yrad [expr {$yrel-0.5}]
	set normsq [expr {$xrad*$xrad+$yrad*$yrad}]
	if {$normsq <= 0.025} {return "0 0 1"}
	return [list [expr {-1*$yrad}] $xrad 0]
    }
	
	#replacing time driver to radius-dependent Saturated Magnetization field s.t. conditions described in Wolfram sims, 
	#and theoretical/ experimental papers, because of invested curiosity.
	
	Specify Oxs_TimeDriver {
	...
				Ms {Oxs_ScriptScalarField {
					script ms
					script_args { {Md 100} {d 32e-10} r}
					#other scalar_fields/ vector_fields needed
					scalar_fields {}
					vector_fields {}
					atlas np
					xrange {10e-10 130e-10}
					yrange {10e-10 130e-10}
					zrange {10e-10 130e-10}
    }}
}

}

Specify Oxs_TimeDriver {
	    basename np_core_shell_Fe3O4_example_theoretical_params
	    evolver :evolve
		stopping_dm_dt 0.1
                Ms {Oxs_AtlasScalarField {
                   atlas :np
                   default_value 0.0
                   values {
                      core 45
					  shellL 45
					  shellR 45
                   }
                }}
		mesh :mesh
		m0 {Oxs_AtlasVectorField {
		atlas :np
		default_value {0. 0. 0.}
		values {
		core {0 0 1}
		shellL {0 0 1}
		shellR {0 0 1}
		}
	}}
}